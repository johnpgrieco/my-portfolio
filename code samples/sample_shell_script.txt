#! /usr/bin/ksh
#*******************************************************************************
# File Name:		sample_script.sh
#                                                                                                                                                             
# Description: 		A sample shell script that calls isql.  It demonstrates:
#			1. Parameter passing. 
#			2. Checking that the correct number of parameters are passed. 
#			3. Checking for an expired password. 
#			4. The use of 'expr' to calculate values and assign 
#			   them to variables. 
#			5. Usage of sed to format the file
#
# Called By:         	manual invocation 
#
# Calls:  		isql
#			sed
#
# Input Files:      	<list here> 
#                             
# Output Files:  	<list here>
#			i.e. standard out
#          
# Arguments:    	Database Owner ID 
#               	Database Owner password 
#               	SQL Server 
#
# Revision History:
#
# Date       Developer   Release  Description
# --------   ----------  ------   ------------------------
# MM/DD/YY   		 NNNNNNN  Initial creation
#*******************************************************************************
usage ()
{
                echo " "
                echo sample_script.sh
                echo "   Usage: sample_script.sh dbo_id dbo_pwd sql_server"
                echo "   demomstrates a sample script invocation."
                echo " "
                echo $errmsg
}

echo "*** $0 started: `date`"
 

#*******************************************************************************
# STEP 1: Check if correct number of arguments are passed.
#*******************************************************************************
if [ $# != 3 ]
then
                errmsg="ERROR: Incorrect number of parameters passed."
                usage
                exit 1
fi


#*******************************************************************************
# STEP 2: Initialize variables
#*******************************************************************************
DBO_ID=$1
DBO_PWD=$2
SQL_SERVER=$3
DATETIME=`date +'%m%d%H%M'`_$$; export DATETIME
SYSYEAR=`date +'%Y'`
SYSMONTH=`date +'%m'`
OUTFILE=dat.templ_audit
 
 

#*******************************************************************************
# STEP 3: Test database login information credentials supplied.
#*******************************************************************************
echo exit > /tmp/${DATETIME}.out
isql -U${DBO_ID} -P${DBO_PWD} -S${SQL_SERVER} > /dev/null < /tmp/${DATETIME}.out
if [ $? != 0 ]
then
                rm /tmp/${DATETIME}.out
        	errmsg="ERROR: The database login information is not valid."
	        usage
	        exit 1
fi
rm /tmp/${DATETIME}.out

 

#*******************************************************************************
# STEP 4: Test database login to make sure the password has not expired.
#*******************************************************************************
echo exit > /tmp/${DATETIME}.out
isql -U${DBO_ID} -P${DBO_PWD} -S${SQL_SERVER} > /tmp/${DATETIME}_2.out < /tmp/${DATETIME}.out
grep "Msg 4022" /tmp/${DATETIME}_2.out >/dev/null
if [ $? -eq 0 ]
then
        rm /tmp/${DATETIME}.out
        rm /tmp/${DATETIME}_2.out
        errmsg="ERROR: Your database password has expired. Change your password and try again."
        usage
        exit 1
fi
rm /tmp/${DATETIME}.out
rm /tmp/${DATETIME}_2.out
 


#*******************************************************************************
# STEP 5: Use expr to create a CURRENT FISCAL YEAR one ahead of the system year.  
#*******************************************************************************
CURR_FISCAL_YEAR=`expr $SYSYEAR + 1`



#*******************************************************************************
# STEP 6: Demonstrate creating a file of SQL commands and passing them to isql. 
# 
# This example will create this file of commands to send to isql: 
#   SET NOCOUNT ON
#   DECLARE @date1 INT
#   SELECT @date1 = datepart(dy, 'September 30, 2005') 
#   DECLARE @date2 INT
#   SELECT @date2 = datepart(dy, 'October 1, 2006')
#   SELECT * FROM temp_table
#      WHERE d_date > CONVERT(INT,CONVERT(VARCHAR,2005)||CONVERT(VARCHAR,@date1))
#        AND d_date < CONVERT(INT,CONVERT(VARCHAR,2006)||CONVERT(VARCHAR,@date2))
#   go
#*******************************************************************************
QUERYOUTPUT=${OUTFILE}.${CURR_FISCAL_YEAR}

# Create the command input file to isql, /tmp/${DATETIME}_3.out
STARTDATE="'September 30, 2005'"
ENDDATE="'October 1, 2006'"
QUERY_DATE1="DECLARE @date1 INT\nSELECT @date1 = datepart(yy, "${STARTDATE}")*1000+datepart(dy, "${STARTDATE}")\n"
QUERY_DATE2="DECLARE @date2 INT\nSELECT @date2 = datepart(yy, "${ENDDATE}")*1000+datepart(dy, "${ENDDATE}")\n"
FILTER1="WHERE d_date > CONVERT(INT,CONVERT(VARCHAR,@date1))\n"
FILTER2="AND d_date < CONVERT(INT,CONVERT(VARCHAR,@date2))\n"
echo "SET NOCOUNT ON\n"${QUERY_DATE1}${QUERY_DATE2}"SELECT * FROM temp_table\n"${FILTER1}${FILTER2}"go " > /tmp/${DATETIME}_3.out

# Use the command input file to create a temp file of records to archive, /tmp/${DATETIME}_4.out.
isql -U${DBO_ID} -P${DBO_PWD} -S${SQL_SERVER} -w2000 -s'' -b > /tmp/${DATETIME}_4.out < /tmp/${DATETIME}_3.out

if [ $? != 0 ]
then
                echo "ERROR: The output file was not created, the process failed with return code: " + $?
                rm /tmp/${DATETIME}_3.out
                rm /tmp/${DATETIME}_4.out
        exit 1
fi
rm /tmp/${DATETIME}_3.out
 
mv /tmp/${DATETIME}_5.out ${QUERYOUTPUT}
rm /tmp/${DATETIME}_4.out


echo "*** $0 completed: `date`"
